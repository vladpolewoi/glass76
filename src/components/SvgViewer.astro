---
const { url } = Astro.props
---

<div class='w-full h-dvh'>
  <div id='svg-container' style='width: 100%; height: 100%;overflow: hidden;'>
    <object
      id='svg-object'
      type='image/svg+xml'
      data={url}
      tabindex='0'
      width='100%'
      height='100%'></object>
  </div>
</div>

<script
  src='https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.0/dist/svg-pan-zoom.min.js'
  is:inline></script>
<script>
  const svgElement = document.getElementById('svg-object')
  if (svgElement) {
    svgElement.onload = () => {
      const svgDoc = svgElement.contentDocument
      const panZoomInstance = svgPanZoom(svgDoc.documentElement, {
        controlIconsEnabled: true,
        zoomEnabled: true,
        // panEnabled: true,
        minZoom: 0.5,
        maxZoom: 20,
        zoomScaleSensitivity: 0.3,
        dblClickZoomEnabled: false,
        preventMouseEventsDefault: false,
        contain: true,
        center: true,
        beforePan(oldPan, newPan) {
          var stopHorizontal = false,
            stopVertical = false,
            gutterWidth = 100,
            gutterHeight = 100,
            // Computed variables
            sizes = this.getSizes(),
            leftLimit =
              -((sizes.viewBox.x + sizes.viewBox.width) * sizes.realZoom) +
              gutterWidth,
            rightLimit =
              sizes.width - gutterWidth - sizes.viewBox.x * sizes.realZoom,
            topLimit =
              -((sizes.viewBox.y + sizes.viewBox.height) * sizes.realZoom) +
              gutterHeight,
            bottomLimit =
              sizes.height - gutterHeight - sizes.viewBox.y * sizes.realZoom

          const customPan = {}
          customPan.x = Math.max(leftLimit, Math.min(rightLimit, newPan.x))
          customPan.y = Math.max(topLimit, Math.min(bottomLimit, newPan.y))

          return customPan
        },
      })

      // Handle key press for Ctrl (or Cmd on macOS)
      svgDoc.addEventListener('keydown', (event) => {
        if (event.ctrlKey || event.metaKey) {
          panZoomInstance.disablePan() // Enable pan
        }
      })

      svgDoc.addEventListener('keyup', (event) => {
        if (!(event.ctrlKey || event.metaKey)) {
          panZoomInstance.enablePan() // Enable zoom again
        }
      })

      // Enable touch event handling for mobile
      svgDoc.addEventListener(
        'touchstart',
        (e) => {
          // Handle touchstart event to initialize pan/zoom
          panZoomInstance.enablePan()
          panZoomInstance.zoomIn()
        },
        { passive: true }
      )

      svgDoc.addEventListener(
        'touchmove',
        (e) => {
          // Handle touchmove for pan
          panZoomInstance.handleTouchMove(e)
        },
        { passive: true }
      )

      svgDoc.addEventListener(
        'touchend',
        (e) => {
          // Handle touchend for stopping pan/zoom
          panZoomInstance.handleTouchEnd()
        },
        { passive: true }
      )
    }
  }
</script>
